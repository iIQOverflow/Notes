vnote_backup_file_826537664 C:/Users/fengjianyong/Documents/MyNotes/daily-notes/Java/Spring/Spring资料.md
# Spring资料
## 知乎
### [学习Spring之前要先学习什么？](https://zhuanlan.zhihu.com/p/64001753)
1. 《Java核心技术》前6章。
2. Java反射原理（选学）。
3. Servlet。
### [如何系统的学习Java](https://zhuanlan.zhihu.com/p/67656686)
#### 学习计划
##### 第一阶段
建立完整的的技术栈，成为一个有富于生产力的高级软件工程师。

在这个阶段要掌握一系列的基础知识和工具。这些东西前后关联，所以学习过程成线性顺序，要从上往下进行。

学习路线：

![](_v_images/20190719194743154_1223.png =400x)

##### 第二阶段
这个阶段的目标是成为Java技术专家、架构师，因此必须在上一阶段的技术上，往高处（例如设计模式、大数据）走，往深处（Spring源码、Java虚拟机）走。

这个阶段的知识，并不存在前后的关联。在完成第一阶段的学习之后，完全看工作的需要，以及个人的兴趣，安排学习的优先级。

学习目标：

![](_v_images/20190719194844545_29137.png =400x)

#### servlet
要成为一个优秀的Java web专家。无论是你用Spring MVC实现的普通REST接口，还是微服务。往深的走，都要深刻理解Servlet以及容器（例如Tomcat）.

因此，在深度学习微服务，以及Spring MVC之前，一定要把Servlet学精，因为他是整个Java web的基石。所以，在成为软件专家的路上，Servlet是最基本的垫脚石，务必重视。

#### SQL
对于程序员，只要掌握最常见的SQL优化原则，做到工整就够了。
#### 缓存、队列
缓存，队列。业界都有了较成熟的方案，例如Redis，ActiveMQ等。在学习的过程中，第一步是掌握核心概念，以及他们要解决的问题。然后就要亲自安装，使用这些软件，建立感性的认识。

其次就是在掌握核心概念的基础上，掌握这些开源软件的Java API，然后试着在此基础上，编写典型的Demo，从而在Java语言层面上彻底掌握。
#### Linux

#### 微服务
微服务并不是一门具体的技术，而是一个设计理念，很多语言和框架都可以实现，例如Java中的Spring MVC等。
#### 设计模式
《Head First设计模式》用Java实现
#### 学习笔记
### [如何快速打好Java基础？](https://www.zhihu.com/question/50904128)
#### Spring
Spring核心：
* IOC
* AOP

通读《Spring源码深度解析》的前几章，再回过头来学习《Spring实战》，最重要的还是阅读Spring核心源码。

**记笔记，分门别类保存demo**

初步掌握Spring，大概需要1到1个半月的时间。

#### 其他知识
Spring是Java编程的基础设施，但真要进入到实际项目的开发，还有些东西绕不过，包括 MySql，Mybatis，Redis，Servlet等，但如果你经过Spring的洗礼，这些东西相对就简单多了，以我的经验，1个月的时间足够了。

#### 实践
练手项目，目标就是把Java的主要技能点串起来，所以自不求尽善尽美（也不可能），所以1个月时间足够了。
#### 最后
按照上面的过程，4个月的时间刚刚好。当然Java的体系是很庞大的，还有很多更高级的技能需要掌握，但不要着急，这些完全可以放到以后工作中边用别学。

### [目前 Java 后端有哪些不是很有必要去学的？](https://www.zhihu.com/question/305924723)
#### JSP
“完全可以放弃对JSP的学习。”
#### Struts
“不要再学习Struts了，从Spring MVC开始吧！”
#### Hibernate
Hibernate作为老牌的OR映射框架，功能非常强大，涵盖面非常广。但这既是它的优点，同时也成为它的“负担”，是开发人员“不能承受之重”。

Hibernate的设计初衷，是为了最大程度的解放程序员，完全隔离数据库，实现彻底的OR映射。程序员甚至可以不写一行SQL语句，单通过配置就能实现对数据库的操作

而现在最流行的MyBatis，作为一个“混合式”，轻量级OR映射框架，既继承了Hibernate的优点，同时也吸取了他的教训。在支持配置的同时，又能接触SQL，从而带来了更多灵活性（包括调试、优化）。

当前，在实际开发中，Hibernate使用的越来越少了。大家更偏爱MyBatis这种轻量级框架。所以，对后来学习者，我的建议是：

“不需要再学习Hibernate了，学MyBatis就够了。”

#### Servlet（要精通）
Servlet不仅要学，而且要学深，学透。

当前，Servlet虽然不再是一个主流web开发技术，但依然是Java Web开发技术的基础，是Java Web容器的基石，是行业标准。而现在流行的各种MVC框架（包括SpringMVC），在最底层，还是以 Servlet为基础的。

![servlet](_v_images/20190719194125587_23509.png =500x)

所以，如果你想要彻底掌握某个MVC框架，则必须彻底理解Servlet。

而且，Servlet作为一个基础设施。精通它，不仅有助于理解各种MVC框架。即使Servlet本身，也有很多实用价值。

如果你深刻理解了Servlet的生命周期，就可以在底层做很多事情。譬如在Request进来的时候，进行拦截，进行权限的判定。也可以在Response发出的时候，进行拦截，统一检查、统一附加。

**Servlet不仅要学，而且要学深，学透。**
#### 其他
1. Applet作为页面插件技术，不用多说，连flash都快被淘汰了，更无论从未流行的applet。
2. Swing作为桌面UI框架。且不说本身设计的咋样。现实开发中，我接触的桌面应用，要么用C++（例如MFC），要么用C#（Winform、WPF）。所以，Swing就没有学习的必要了。
3. JDBC作为较低层的数据库基础设施，JDBC被很多框架（例如MyBatis）支持。但在实际开发中，程序员即使不了解也无大碍。因此，虽然我不能建议你放弃JDBC学习，但如果你时间有限，完全可以把它的优先级排低一点。
4. XMLXML现在还在广泛应用。但作为一个web数据传输格式，正在逐渐被JSON替代。所以，对Java后端学习来说，XML简单了解即可。至于庞杂的XML操作API（例如XPath），完全不必学习。将来真要用到，再查也不迟。
### [对于自学Java的人来说，如何系统的，全方面的学习Java？](https://www.zhihu.com/question/311758187)
汇总帖。
### [关于Java学习的一些补充](https://zhuanlan.zhihu.com/p/53315831)

从设计目标来说，Spring Boot只是实现了Spring的自动化配置，降低了项目搭建的复杂度。

从技术上说，Spring Boot的底层依然是Spring的核心机制，包括IOC、AOP，以及实现者 - Spring容器。所以，Spring Boot作为一个承载者。如果承载的是web项目，Spring MVC该怎么工作，还是怎么工作。

学习Spring，最“正”的路径依然如下：

**Spring -> Servlet -> Spring MVC -> Spring Boot**

### [Spring IoC有什么好处呢？](https://www.zhihu.com/question/23277575)

### [Spring源码阅读指南](https://zhuanlan.zhihu.com/p/51393923)
#### 1. 先掌握Spring的基本用法。
#### 2. 写几个典型的Spring Demo
#### 3. 边调试，边阅读
直接用Maven下载源码，然后在Eclipse中Debug进去。此时，就像你平时阅读同事的源码一样。带着疑问，带着猜测。阅读的过程，边验证，边调整，总重形成体系的思路。

记着，因为Spring源码复杂，且继承体系深，所以一定要边阅读，边记笔记，边画图。

很重要的一点。在阅读Spring源码前，一定要先有自己的想法：如果这个东西（例如经典的getBean()方法）由你要设计，会怎么做。然后带着想法，跟（debug）进去。不断验证，不断调整。
#### 4. 不需面面俱到，只抓重点

#### 5. Spring阅读的收益
* 精通Java
* 学习设计
* 深刻理解Spring用法

最后，如果你是一个初学者。刚开始阅读Spring源码，一定会感觉特别困难。因为其中涉及太多新东西。但这正说明，Spring源码是一个宝库。

咬咬牙，扛过去，你的技术层次就会跃上一个新的台阶，甚至是质的飞跃
### [如何快速学习ssm 框架？](https://www.zhihu.com/question/57719761)
[免费教程地址](http://how2j.cn/t/46)
### [怎么阅读Spring源码？](https://www.zhihu.com/question/21346206)